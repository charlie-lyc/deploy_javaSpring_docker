# Java Spring 과 Docker 이용한 배포 방법

    - 1. gitlab main branch merge 후
        
    - 2. 프로젝트 clean & build
        - Intellij 에서 gradle clean 후 build
        - /build/libs/ 폴더에 2가지 파일이 생성되는지 확인(생성이 안된다면 빌드가 제대로 작동하지 않은것임, 오류 찾아야 함)
        
    - 3. ftp 접속
        - 프로토콜: SFTP
        - 호스트: <ip>
        - 포트: <port>
        - 사용자: <username>
        - 비밀번호: <password>
            
    - 4. ftp 접속후 경로 이동
        - 경로: /home/service/backend

    - 5. 위 2번에서 실행(build) 후 생성된 jar파일 업로드 (드래그앤 드롭)
        - 생성된 jar파일: homepage-backend-0.0.1-SNAPSHOT.jar ( 파일명 끝에 -plain이라고 적힌것도 있을수 있는데, 이 파일은 무시)

    - 6. ssh 접속        
        
    - 7. 도커 프로세스 조회 후 컨테이너 확인
        ```bash
		docker ps
	```
    - 8. 5번에서 업로드한 jar 파일 경로로 이동
        - cd /home/service/backend
        - 이동 후 ftp로 업로드한 파일이 있는지 다시 한번 확인 (업로드한 시간 확인해 볼 것)

    - 9.  도커로 배포 시작
        - 지금부터 실행되는 도커 명령어는 /home/service/backend 경로로 이동 후 수행할 것
        1. 서버에 Dockerfile 확인(절대 지우지 말것)
            1. 만약 Dockerfile이 필요한 경우 아래와 같이 생성
                
                ```bash

                ## Create Dockerfile
                echo 'FROM azul/zulu-openjdk:14
                ENV spring_profiles_active prod
                ADD homepage-backend-0.0.1-SNAPSHOT.jar app.jar
                ENTRYPOINT ["java", "-jar", "/app.jar"]

                # Timezone 설정
                ENV TZ=Asia/Seoul
                RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone'> ./Dockerfile

                ```
                
        2. 기존 Docker Container Stop & Remove
            - docker stop [컨테이너명]
            - docker rm [컨테이너명]
            
            ```bash

            # 도커 정지
            docker stop homepage-backend

            #도커 삭제
            docker rm homepage-backend

            ```
            
        3. 기존 Docker Image 조회 및 삭제
            - docker images  [이미지명]
            - docker rmi [이미지명]
            
            ```bash

            #도커 이미지 조회
            docker images

            #도커 이미지 삭제
            docker rmi homepage-backend

            ```
            
        4. 새로운 Docker Image 빌드
            - docker build -tag [이미지명] [도커파일경로]
            
            ```bash
            #이미지 빌드 (끝에 ./ 반드시 붙일것(이유는 현재 실행하는 경로에서 Dockerfile을 참조해서 내용에 맞게 이미지를 새로 빌드하기 때문)
            docker build --tag homepage-backend ./
            ```
            
        5. 4번에서 생성한 이미지를 가지고 Container 시작
            - docker run --name [컨터이너명] -v [서버파일경로]:[컨터이너서버경로] -d -p [내부포트]:[외부포트] [이미지명]
            
            ```bash
            #컨테이너 실행
            docker run --name homepage-backend -v /home/service/homepage/file:/home/service/homepage/file -v /home/common/api/file/ai:/home/common/api/file/ai -d -p 5000:80 homepage-backend
            ```

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 운영체제 재부팅시 자동 재시작 설정

## docker-compose.yml (예시)

version: "3.1"
services:
  wordpress:
    image: wordpress:latest
    container_name: mywp
    depends_on:
      - db
    ports:
      - 8080:80
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: MY_USERNAME
      WORDPRESS_DB_PASSWORD: MY_PASSWORD
      WORDPRESS_DB_NAME: MY_DBNAME
      WORDPRESS_TABLE_PREFIX: wp_
    # 자동 재시작 추가 #
    restart: always
    # ############### #
    volumes:
      - /mnt/disks/data-disk-200g/wordpress-data:/var/www/html

  db:
    image: mysql:latest
    container_name: mydb
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: MY_DBNAME
      MYSQL_USER: MY_USERNAME
      MYSQL_PASSWORD: MY_PASSWORD
      MYSQL_ROOT_PASSWORD: MY_ROOT_PASSWORD
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    # 자동 재시작 추가 #
    restart: always
    # ############### #
    volumes:
      - /mnt/disks/data-disk-200g/mysql-data:/var/lib/mysql


## 또는 이미 docker container 가 실행 중이라면,

$ docker ps -a
CONTAINER ID   IMAGE              COMMAND                  CREATED          STATUS                      PORTS     NAMES
fbe389fc69b1   wordpress:latest   "docker-entrypoint.s…"   57 minutes ago   Exited (0) 54 minutes ago             mywp
eb8d9dee912e   mysql:8.0.22       "docker-entrypoint.s…"   57 minutes ago   Exited (1) 54 minutes ago             mydb

$ docker update --restart=always  fbe389fc69b1

-------------------------------------------------------------------------------------------------------------------------------------------------------------------
